$NetBSD: patch-cj,v 1.7 2012/03/21 12:18:33 drochner Exp $

The mem-overflow test contains a declaration of an empty struct, which breaks
on at least SunPro cc, and presumably some other non-gcc compilers.  Skip this
test for now, pending a better fix.
https://bugzilla.gnome.org/show_bug.cgi?id=641350

--- glib/tests/Makefile.in.orig	2012-03-11 23:36:24.057409536 +0000
+++ glib/tests/Makefile.in
@@ -69,7 +69,7 @@ am__EXEEXT_2 = testing$(EXEEXT) option-c
 	strfuncs$(EXEEXT) string$(EXEEXT) markup-parse$(EXEEXT) \
 	markup-collect$(EXEEXT) markup-escape$(EXEEXT) \
 	markup-subparser$(EXEEXT) array-test$(EXEEXT) \
-	hostutils$(EXEEXT) gvariant$(EXEEXT) mem-overflow$(EXEEXT) \
+	hostutils$(EXEEXT) gvariant$(EXEEXT) \
 	utf8-performance$(EXEEXT) utils$(EXEEXT) regex$(EXEEXT) \
 	base64$(EXEEXT) sequence$(EXEEXT) scannerapi$(EXEEXT) \
 	shell$(EXEEXT) collate$(EXEEXT) utf8-pointer$(EXEEXT) \
@@ -173,8 +173,6 @@ markup_parse_DEPENDENCIES = $(progs_ldad
 markup_subparser_SOURCES = markup-subparser.c
 markup_subparser_OBJECTS = markup-subparser.$(OBJEXT)
 markup_subparser_DEPENDENCIES = $(progs_ldadd)
-mem_overflow_SOURCES = mem-overflow.c
-mem_overflow_OBJECTS = mem-overflow.$(OBJEXT)
 mem_overflow_DEPENDENCIES = $(progs_ldadd)
 node_SOURCES = node.c
 node_OBJECTS = node.$(OBJEXT)
@@ -293,7 +291,7 @@ SOURCES = array-test.c atomic.c base64.c
 	$(gdatetime_SOURCES) gvariant.c hash.c hmac.c hostutils.c \
 	$(keyfile_SOURCES) list.c logging.c mappedfile.c \
 	markup-collect.c markup-escape.c markup-parse.c \
-	markup-subparser.c mem-overflow.c node.c \
+	markup-subparser.c node.c \
 	$(option_argv0_SOURCES) $(option_context_SOURCES) pattern.c \
 	$(protocol_SOURCES) queue.c $(rand_SOURCES) regex.c \
 	scannerapi.c sequence.c shell.c slist.c sort.c \
@@ -308,7 +306,7 @@ DIST_SOURCES = array-test.c atomic.c bas
 	$(gdatetime_SOURCES) gvariant.c hash.c hmac.c hostutils.c \
 	$(keyfile_SOURCES) list.c logging.c mappedfile.c \
 	markup-collect.c markup-escape.c markup-parse.c \
-	markup-subparser.c mem-overflow.c node.c \
+	markup-subparser.c node.c \
 	$(option_argv0_SOURCES) $(option_context_SOURCES) pattern.c \
 	$(protocol_SOURCES) queue.c $(rand_SOURCES) regex.c \
 	scannerapi.c sequence.c shell.c slist.c sort.c \
@@ -567,7 +565,7 @@ EXTRA_DIST = 4096-random-bytes keyfilete
 TEST_PROGS = testing option-context option-argv0 keyfile fileutils \
 	test-printf protocol rand strfuncs string markup-parse \
 	markup-collect markup-escape markup-subparser array-test \
-	hostutils gvariant mem-overflow utf8-performance utils regex \
+	hostutils gvariant utf8-performance utils regex \
 	base64 sequence scannerapi shell collate utf8-pointer \
 	utf8-validate utf8-misc unicode checksum hmac hash cache date \
 	node convert list slist queue tree uri dir pattern logging \
@@ -786,9 +784,6 @@ markup-parse$(EXEEXT): $(markup_parse_OB
 markup-subparser$(EXEEXT): $(markup_subparser_OBJECTS) $(markup_subparser_DEPENDENCIES) $(EXTRA_markup_subparser_DEPENDENCIES) 
 	@rm -f markup-subparser$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(markup_subparser_OBJECTS) $(markup_subparser_LDADD) $(LIBS)
-mem-overflow$(EXEEXT): $(mem_overflow_OBJECTS) $(mem_overflow_DEPENDENCIES) $(EXTRA_mem_overflow_DEPENDENCIES) 
-	@rm -f mem-overflow$(EXEEXT)
-	$(AM_V_CCLD)$(LINK) $(mem_overflow_OBJECTS) $(mem_overflow_LDADD) $(LIBS)
 node$(EXEEXT): $(node_OBJECTS) $(node_DEPENDENCIES) $(EXTRA_node_DEPENDENCIES) 
 	@rm -f node$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(node_OBJECTS) $(node_LDADD) $(LIBS)
@@ -908,7 +903,6 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/markup-escape.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/markup-parse.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/markup-subparser.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mem-overflow.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/node.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option-argv0.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/option-context.Po@am__quote@
