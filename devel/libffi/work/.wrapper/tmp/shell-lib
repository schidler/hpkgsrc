msg_log()
{
	: ${echo=echo}
	_msg_log="$1"; shift
	case $_msg_log in
	stdout)	$echo "$@" ;;
	stderr)	$echo "$@" 1>&2 ;;
	*)	$echo "$@" >> $_msg_log ;;
	esac
}
die()
{
	msg_log stderr "$@"
	exit 1
}
check_prog()
{
	: ${test=test}
	_ckp_var="$1"; shift
	eval _ckp_tmp=\"\$$_ckp_var\"
	if $test "x$_ckp_tmp" != "x"; then
		return 0
	fi
	for _ckp_prog do
		_ckp_IFS="${IFS}"; IFS=":"
		for _ckp_dir in ${PATH}; do
			if $test -x "$_ckp_dir/$_ckp_prog"; then
				eval $_ckp_var=\""$_ckp_dir/$_ckp_prog"\"
				return 1
			fi
		done
		IFS="${_ckp_IFS}"
	done
	die "$_ckp_var could not be set."
}
shquote()
{
	: ${echo=echo}
	: ${sed=sed}
	_shq_arg=$1
	_shq_sed="$sed -e 1s/^X//"
	_shq_sed_quote_subst='s/\([\`\"$\\]\)/\\\1/g'
	case $_shq_arg in
	*[\`\"\$\\]*)
		shquoted=`$echo "X$_shq_arg" | $_shq_sed -e "$_shq_sed_quote_subst"`
		;;
	*)
		shquoted="$_shq_arg"
		;;
	esac
	case $shquoted in
	*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
		shquoted="\"$shquoted\""
		;;
	esac
}
lock_file()
{
	: ${dirname=dirname}
	: ${echo=echo}
	: ${link=link}
	: ${mkdir=mkdir}
	: ${mktemp=mktemp}
	: ${rm=rm}
	: ${test=test}
	: ${touch=touch}
	_lf_lockfile=
	_lf_nfs=
	while $test $# -gt 0; do
		case $1 in
		-f)	_lf_lockfile="$2"; shift ;;
		-n)	_lf_nfs="$2"; shift ;;
		esac
		shift
	done
	if $test -z "$_lf_lockfile"; then
		$echo 1>&2 "$0: no lock file specified."
		exit
	fi
	_lf_pid=$$
	_lf_lockdir=`$dirname $_lf_lockfile`
	_lf_uniqfile=`$mktemp "$_lf_lockdir/.lock.$_lf_nfs.$_lf_pid.XXXXXX" 2>/dev/null` || return 1
	if $test -n "$_lf_nfs"; then
		{ $echo $_lf_pid; $echo $_lf_nfs; } > $_lf_uniqfile
	else
		$echo $_lf_pid > $_lf_uniqfile
	fi
	$link $_lf_uniqfile $_lf_lockfile 2>/dev/null
	if $test $_lf_uniqfile -ef $_lf_lockfile; then
		_lf_result=0
	else
		_lf_result=1
	fi
	$rm -f $_lf_uniqfile
	return $_lf_result
}
init_queue()
{
	_qname="$1"
	eval "_q${_qname}head=1111111111"
	eval "_q${_qname}tail=1111111111"
}
append_queue()
{
	: ${test=test}
	_qname="$1"; shift
	while $test $# -gt 0; do
		eval "_qtail=\"\$_q${_qname}tail\""
		eval "_q${_qname}${_qtail}=\"\${1}\""
		case $_qtail in
		*000000000)	_qtail=${_qtail%000000000}1 ;;
		*)		_qtail=${_qtail}0 ;;
		esac
		eval "_q${_qname}tail=\"\${_qtail}\""
		shift
	done
}
prepend_queue()
{
	: ${test=test}
	_qname="$1"; shift
	while $test $# -gt 0; do
		eval "_qhead=\"\$_q${_qname}head\""
		case $_qhead in
		*1)	_qhead=${_qhead%1}000000000 ;;
		*)	_qhead=${_qhead%0} ;;
		esac
		eval "_q${_qname}${_qhead}=\"\${1}\""
		eval "_q${_qname}head=\"\${_qhead}\""
		shift
	done
}
head_queue()
{
	_qname="$1"; shift
	eval "_qhead=\"\$_q${_qname}head\""
	eval "${1}=\"\$_q${_qname}${_qhead}\""
}
pop_queue()
{
	_qname="$1"; shift
	head_queue $_qname $1
	case $_qhead in
	*000000000)	_qhead=${_qhead%000000000}1 ;;
	*)		_qhead=${_qhead}0 ;;
	esac
	eval "_q${_qname}head=\"\${_qhead}\""
}
queue_is_empty()
{
	: ${test=test}
	_qname="$1"
	eval "_qhead=\"\$_q${_qname}head\""
	eval "_qtail=\"\$_q${_qname}tail\""
	$test "$_qhead" = "$_qtail"
	return $?
}
init_fqueue()
{
	_fqname="$1"
	: > "$_fqname"
}
append_fqueue()
{
	: ${echo=echo}
	: ${test=test}
	_fqname="$1"; shift
	while $test $# -gt 0; do
		$echo "$1" >> "$_fqname"
		shift
	done
}
prepend_fqueue()
{
	: ${cat=cat}
	: ${echo=echo}
	: ${mv=mv}
	_fqname="$1"; shift
	_fqtmpfile="$_fqname.$$"
	init_queue _fqtmpqueue
	prepend_queue _fqtmpqueue "$@"
	while ! queue_is_empty _fqtmpqueue; do
		pop_queue _fqtmpqueue _fqelt
		$echo "$_fqelt" >> "$_fqtmpfile"
	done
	$cat "$_fqname" >> "$_fqtmpfile"
	$mv -f "$_fqtmpfile" "$_fqname"
}
head_fqueue()
{
	: ${head=head}
	_fqname="$1"; shift
	_tmp=`$head -n 1 "$_fqname"`
	eval "${1}=\"\$_tmp\""
}
pop_fqueue()
{
	: ${mv=mv}
	: ${sed=sed}
	_fqname="$1"; shift
	_fqtmpfile="$_fqname.$$"
	head_fqueue "$_fqname" $1
	$sed "1,1d" "$_fqname" >> "$_fqtmpfile"
	$mv -f "$_fqtmpfile" "$_fqname"
}
fqueue_is_empty()
{
	: ${test=test}
	: ${wc=wc}
	_fqname="$1"
	if $test -f "$_fqname"; then
		_fqlines=`$wc -l < "$_fqname"`
		return $_fqlines
	else
		return 1
	fi
}
