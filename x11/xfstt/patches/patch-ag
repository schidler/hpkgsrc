$NetBSD$

Convert varargs-macros to old-style macros, to make the package
compile when using gcc 2.95.
 

--- libfstt/rafile.cc.orig	2012-03-03 00:33:23.000000000 +0900
+++ libfstt/rafile.cc	2012-06-13 11:50:50.000000000 +0900
@@ -68,10 +68,10 @@
 	debug("Memory holes:\n");
 	for (int i = 0; i < memidx; ++i)
 		if (memdbg[i].ptr)
-			debug("MEM hole[%3d] = %p\n", i, memdbg[i].ptr);
+			debug2("MEM hole[%3d] = %p\n", i, memdbg[i].ptr);
 
 	if (memcount != 0)
-		debug("MEM hole: memcount = %d\n", memcount);
+		debug1("MEM hole: memcount = %d\n", memcount);
 }
 
 void *
@@ -81,8 +81,8 @@
 
 	memused += size;
 
-	debug("MEM new[](%5d) = %p", size, ptr);
-	debug(", memcount = %d, memidx = %d", ++memcount, memidx);
+	debug2("MEM new[](%5d) = %p", size, ptr);
+	debug2(", memcount = %d, memidx = %d", ++memcount, memidx);
 
 	int i = memidx;
 
@@ -90,7 +90,7 @@
 	if (i <= 0)
 		i = memidx++;
 
-	debug(", idx = %d, used %d\n", i, memused);
+	debug2(", idx = %d, used %d\n", i, memused);
 
 	memdbg[i].ptr = ptr;
 	memdbg[i].len = size;
@@ -101,15 +101,15 @@
 void
 operator delete[](void *ptr)
 {
-	debug("MEM delete[](%p)", ptr);
-	debug(", memcount = %d, memidx = %d\n", --memcount, memidx);
+	debug1("MEM delete[](%p)", ptr);
+	debug2(", memcount = %d, memidx = %d\n", --memcount, memidx);
 
 	int i = memidx;
 	while (--i >= 0 && memdbg[i].ptr != ptr);
 	if (i >= 0) {
 		memdbg[i].ptr = 0;
 		memused -= memdbg[i].len;
-		debug(", idx = %d, used %d\n", i, memused);
+		debug2(", idx = %d, used %d\n", i, memused);
 		if (++i == memidx)
 			--memidx;
 	} else
@@ -124,15 +124,15 @@
 	void *ptr = malloc(size);
 	memused += size;
 
-	debug("MEM new(%7d) = %p", size, ptr);
-	debug(", memcount = %d, memidx = %d", ++memcount, memidx);
+	debug2("MEM new(%7d) = %p", size, ptr);
+	debug2(", memcount = %d, memidx = %d", ++memcount, memidx);
 
 	int i = memidx;
 	while (--i >= 0 && memdbg[i].ptr);
 	if (i <= 0)
 		i = memidx++;
 
-	debug(", idx = %d, used %d\n", i, memused);
+	debug2(", idx = %d, used %d\n", i, memused);
 
 	memdbg[i].ptr = ptr;
 	memdbg[i].len = size;
@@ -143,15 +143,15 @@
 void
 operator delete(void *ptr)
 {
-	debug("MEM delete(%p)", ptr);
-	debug(", memcount = %d, memidx = %d", --memcount, memidx);
+	debug1("MEM delete(%p)", ptr);
+	debug2(", memcount = %d, memidx = %d", --memcount, memidx);
 
 	int i = memidx;
 	while (--i >= 0 && memdbg[i].ptr != ptr);
 	if (i >= 0) {
 		memdbg[i].ptr = 0;
 		memused -= memdbg[i].len;
-		debug(", idx = %d, used %d\n", i, memused);
+		debug2(", idx = %d, used %d\n", i, memused);
 		if (++i == memidx)
 			--memidx;
 	} else
@@ -166,7 +166,7 @@
 {
 	int fd = open(fileName, O_RDONLY);
 	if (fd < 0) {
-		debug("Cannot open \"%s\"\n", fileName);
+		debug1("Cannot open \"%s\"\n", fileName);
 		ptr = absbase = base = 0;
 		return;
 	}
@@ -176,7 +176,7 @@
 	base = (uint8_t *)mmap(0L, length, PROT_READ, MAP_SHARED, fd, 0L);
 	close(fd);
 	if (base == MAP_FAILED) {
-		debug("MMap failed '%s'\n", strerror(errno));
+		debug1("MMap failed '%s'\n", strerror(errno));
 		ptr = absbase = base = 0;
 		return;
 	}
@@ -203,7 +203,7 @@
 		checksum += readUInt() & (-1 << ((-length & 3) << 3));
 	ptr = saveptr;
 
-	debug("Checksum is %08X\n", calcChecksum());
+	debug1("Checksum is %08X\n", calcChecksum());
 
 	return checksum;
 }
